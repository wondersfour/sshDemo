<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
    http://www.springframework.org/schema/jee 
    http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 配置sql输出日志 -->
	
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
	    <property name="resultSetLogEnabled" value="false" />
	</bean>
    <!--配置数据源 这里是使用的是c3p0连接池 com.mchange.v2.c3p0.ComboPooledDataSource-->
    <!-- c3p0属性名和druid不同 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" init-method="init">
        <property name="driverClassName" value="${jdbc.driver}" />  <!--数据库连接驱动-->
        <property name="url" value="${jdbc.url}" />     <!--数据库地址-->
        <property name="username" value="${jdbc.username}" />   <!--用户名-->
        <property name="password" value="${jdbc.password}" />   <!--密码-->
         <!-- 数据库连接池配置 -->
        <property name="initialSize" value="20" /><!-- 初始化连接数量 -->
        <property name="minIdle" value="5" />   <!-- 最小空闲连接数量 -->   
        <property name="maxActive" value="1500" /> <!-- 最大连接数量 --> 
        <property name="maxWait" value="60000" />  <!-- 最大建立连接等待时间(毫秒)。如果超过此时间将接到异常。设为－1表示无限制-->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  <!--  配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒   -->
        <property name="minEvictableIdleTimeMillis" value="300000" />   <!-- 配置一个连接在池中最小生存的时间，单位是毫秒   -->
        <property name="validationQuery" value="SELECT 'x'" />  
        <property name="testWhileIdle" value="true" />  <!--空闲时是否进行验证，检查对象是否有效 -->   
        <property name="testOnBorrow" value="false" />  <!--取得对象时是否进行验证，检查对象是否有效 -->           
        <property name="testOnReturn" value="false" />  <!--返回对象时是否进行验证 -->       
           <!--  打开PSCache，并且指定每个连接上PSCache的大小   -->
        <property name="poolPreparedStatements" value="true" />  <!-- 表明是否开启statement cache，默认为false，也就是不开启 -->       
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  <!-- statement cache的大小，默认为-1，也就是不限制 -->
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计   -->
        <property name="filters" value="stat,log4j" />
         <property name="proxyFilters">
        <list>
            <ref bean="log-filter"/>
        </list>
    </property>
    </bean>

    <!--配置session工厂-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="com" />
        <property name="hibernateProperties">
            <props>                
            	<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> <!--hibernate根据实体自动生成数据库表-->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>   <!--指定数据库方言-->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>     <!--在控制台显示执行的数据库操作语句-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>     <!--在控制台显示执行的数据哭操作语句（格式）-->
            </props>
        </property>
    </bean>
    
    <!-- 事务配置 声明式事务-->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>